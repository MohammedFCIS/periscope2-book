# Feature Analyzer Module {#sec-fam}

The key to take an informative decision in business, scientific research or even an important aspect in the life, is to understand the related data and what patterns and trends in this data. Hence come the importance of *Feature Analyzer Module (FAM)* to identify data features and understand each feature nature, pattern and trend statistically and visually.

## Introduction

Before diving developing FAM, or any other module, developer would need to define three things:

-   What precisely this module will do (module functions)
-   What each function needs to perform its functionality properly (module input)
-   How each function will be presented to module user or to other modules (module output)

The above three points will be discussed briefly in next subsections from FAM point of view

### Functions

FAM main function is to define data features and and their behavior. This function can be broken down into the following sub-functions:

-   validating data and identifying its features and observations (@sec-data),
-   identifying data features and understanding each feature nature (@sec-IFDT),
-   understanding feature distribution over data observations (@sec-cfss),
-   visualizing data features correctly to get more insights (@sec-visualization)

### Input

FAM module has two input types:

-   Data input: that will be any `R` data.frame object
-   Configurations input: that is list of configuration parameters that are needed for each FAM function
    -   These parameters will be defined through the journey of building module different functions

### Output

Defining module output is essential part to identify module functions and input. FAM module output will be a report that displays:

-   Data summary (features count and observations count)
-   Data features info:
    -   Features type, properties and statistical summary
    -   Features visualization

Discussing each function output or UI design will be part of each function building steps. Check @fig-2_1 for FAM module objective and IO summary

```{mermaid}
%%| fig-cap: "Feature Analyzer Module (FAM) Objective and IO"
%%| fig-width: 3 
%%| label: fig-2_1
flowchart TD
  A[R data.frame] --> C>"Feature Analyzer Module
  - Identify feature type
  - Calculate feature statistical summary
  - Visualize feature data"]
  B[Configurations input] --> C
  C --> D["- Data Summary
  - Data Features type, 
    properties and statistical summary
  - Data Features plots"]
```

*TODO: Refer to app state at this point (GH PR)*

## Data Summarization {#sec-data}

### Definition

Data can be defined as a collection of observations or facts that describe an event or a fact in order to make an informative decision later [see @Heumann2016, p. 3]

Examples for that can be:

-   Students grades in certain class/school
-   The trees growth rate for certain forest
-   Goods selling information in certain market

Observations can be collected for one or more features to describe an event such as:

-   Students name, gender, subject, grade, etc..
-   Trees type, name, tall, etc..
-   goods name, manufacture, expiration date, price, etc..

Each feature gives an insight or different look into the data in which leads to an informative decision or answer at the end

### Function Design

#### Input

Since the most commonly used data types to store data in `R` are `data.frame` and `tibbles` types, these are the two types that will be used as an input for the **FAM** module.

#### Output

Function output is either:

-   data features count and observations count
-   or error message if the data is invalid or has invalid data type

#### Workflow

Next is to define the function workflow, check @fig-2_2

```{mermaid}
%%| fig-cap: "Data Summarization workflow"
%%| fig-width: 4.5
%%| label: fig-2_2
sequenceDiagram
  actor User as FAM Module User
  participant FAMS as FAM Server
  participant FAMU as FAM UI
  
  User ->> FAMS: Send data object
  FAMS ->>  FAMS: Validate data object
    alt valid data
        FAMS -->> FAMU: Send data summary info
        FAMU ->> User: Display data summary info
        FAMS ->>  FAMS: Perform other module functions
    else invalid data
        FAMS -->> FAMU: Send error message
        FAMU ->> User: Display user error message
    end
  
```

#### UI

*TODO: Refer to app UI state at this point (screen shot)*

## Features Types Identification {#sec-IFDT}

Data features are data descriptors, they can be anything and have any type [see @Heumann2016, p. 4]. However, features can be classified into two main groups:

-   Complex Feature
-   Simple Feature

Complex feature is any feature that cannot be straight forward measured or got analyzed statistically and would need more special *data processing* and most probably it will be converted to many sub features by its own to be analyzed statistically (i.e YouTube video, binary log files. book text, etc..). Each sub-type of these features would need a very specific and different type of processing (i.e video processing, audio processing, NLP, etc..) and that is beyond the scope of this book.

In contrast, Simple feature is any feature that can be directly classified, measured and got analyzed statistically (i.e height, width, age, class, etc..). This type can classified into three main sub-types:

-   Categorical

-   Discrete

-   Continuous

Check @fig-2_22 for features types summary

```{mermaid}
%%| fig-cap: "Features Types"
%%| fig-width: 4.5
%%| label: fig-2_22
flowchart TD
  A[Feature Type]
  A  --> B[Complex]
  A  --> C[Simple]
  
  B  --> B1[Video]
  B  --> B2[Image]
  B  --> B3[Audio]
  
  C  --> C1[Categorical]
  C  --> C2[Numerical]
  
  C2 --> C21[Discrete]
  C2 --> C22[Continuous]
  C1 --> C11[Nominal]
  C1 --> C12[Ordinal]
```

In next sections, we will discuss these types in more detail and discuss how to analyze them using **FAM** module

### Categorical Feature

Categorical feature is data that cannot be measured with numbers and have finite number of categories or distinct groups (i.e gender, race, language, etc..), but it still can take numeric *form* (i.e age groups, weight groups, etc..) [see @Heumann2016, p. 5].

Categorical data can be classified into two sub types:

-   **Nominal** in which categories order is not important and means nothing (i.e gender, nationality, eye color, etc..)
-   **Ordinal** in which categories order is important such as measurements in general (low, middle, high), grades (A, B, C, ..) Days of the week (Saturday, Sunday, ..)

However, as order will not affect statistical measurements, it won't concern us here.

#### Identifying Categorical Feature

Categorical feature can be represented in `R` via datatype `factor` and can be identified easily using `class` method, for example:

```{r}
class(iris$Species)
```

and we can know the unique values by calling `levels` method on `R` factors

```{r}
levels(iris$Species)
```

However, not all categorical values are defined as factors, they can have `character` or `numerical` datatypes for example the following features have a finite number of categories but they are not identified as `factor`:

```{r}
class(mtcars$cyl)
class(letters)
```

In that case, FAM compares the number of unique values against configurable threshold to determine if this feature will be treated as a categorical feature or not. Check @fig-2_3 for identifying categorical feature algorithm (note that a new configuration input `categories threshold` has been added)

```{mermaid}
%%| fig-cap: "Identifying Categorical Feature Algorithm"
%%| fig-width: 3
%%| label: fig-2_3
flowchart TD
  S(start)
  S  --> P1(Check feature using `class` function)
  P1 --> C1{Is it factor?}
  
  C1 --> |Yes| D1[categorical feature]
  D1 --> E(end)
  
  C1 --> |No| C2{"unique values count is
                 greater than
                 categories threshold?"}
  C2 --> |Yes| E3(end)
  C2 --> |No| C3{"unique values count is
                 greater than 1?"}
  C3 --> |No| E2(end)
  C3 --> |Yes| D3[categorical feature]
  D3 --> E2(end)
  
```

### Numerical Features

By reviewing @fig-2_2, we know that numerical features can either be **Discrete** or **Continuous** [see @Heumann2016, pp. 6-8]

#### Discrete Feature

Discrete feature is a numeric feature with finite and countable number of values between any two values, such as:

-   Store customers count per week day
-   Employees age
-   Weather degrees for a month

#### Continues Feature

Continues feature is a numeric feature with an infinite and uncountable number of values between any two variables, such as:

-   BMI of students in a school
-   Daily rain volume in a certain area during in predefined duration
-   Yearly volume of Nile flow

#### Identifying Numerical Features

Both numerical features can be mapped into `numeric` data type in `R` and to be more specific `Discreate` features can be mapped to `integer` datatype while continuous feature can be mapped to `double` type.

However, that distinction can be tricky in `R` using either `class` or `typeof` functions, check:

```{r}
paste(class(1), class(1.0), class(1L))
paste(typeof(1), typeof(1.0), typeof(1L))
```

So, **FAM** distinguishes between both features by their definition as discrete feature have integer values where continuous feature is otherwise, check @fig-2_4

```{mermaid}
%%| fig-cap: "Identifying Numerical Feature Algorithm"
%%| fig-width: 3
%%| label: fig-2_4
flowchart TD
  S(start)
  S  --> C1{is it categorical feature?}
  
  C1 --> |Yes| E(end)
  
  C1 --> |No| C2{is feature Numerical?}
  C2 --> |No| E2(end)
  
  C2 --> |Yes| C3{is feature Integer?}
  
  C3 --> |Yes| D1[Discrete Feature]
  D1 --> E3(end)
  
  C3 --> |No| D2[Continuous Feature]
  D2 --> E3
  
```

## Feature Statistical Calculation {#sec-cfss}

Second **FAM** function is calculating feature statistical summary after its type being identified, review @fig-2_1.

Normally, data collections have hundreds to thousands of observations for its different features, which makes inspecting features observations manually is pointless and waste of time. Hence come the importance of calculating feature statistical summary to understand this amount of data and to extract decision making supporting insights.

In next sections, we will discuss how **FAM** will implement different statistical methods to summarize data and know its dispersion for different features.

### Central Tendency Measures Calculation

A measure of central tendency is a feature data *average/center* value. The most common measures of central tendency methods are:

-   The arithmetic mean (numerical feature only) [see @Walpole2014, p. 111; also @Heumann2016, pp. 38-40]
-   The median (numerical feature only) [see @Walpole2014, p. 228; also @Heumann2016, p. 40]
-   Quantiles (numerical feature only) [see @Heumann2016, p. 43]
-   The mode [see @Heumann2016, p. 45]

#### Arithmetic Mean

**Arithmetic Mean** is simply the data average as follow:

$$
\bar{x}  = \frac{1}{n} \sum_{i = 1}^{n}{x_i}
$$

and it can be calculated using `mean` function in `R`

```{r}
mean(trees$Height)
```

#### Median

Median value is the value that divides feature data into two equal sets. The median calculated differently based on observations count as follow:

-   If count of observations is odd, the median will be the middle value
-   If count of observations is even, the median will be the mean of the middle two values

::: callout-tip
Feature observations need to be ordered before calculating the mean. Lucky us, `R` is doing that for us
:::

$$
    median = \begin{cases} 
              x_{\frac{n+1}{2}}  & \text{ if } n \text{is odd} \\
              \frac{1}{2}(x_{\frac{n}{2}} + x_{\frac{n}{2} + 1}) & \text{otherwise}
          \end{cases}
$$

and it can be calculated using `median` function in `R`. For example, the Median of height of `R` embedded dataset `tree` is:

```{r}
median(trees$Height)
```

::: callout-warning
Mean and Median values happen to the same in the used dataset as it symmetrically distributed around its center, but that is not usually the case
:::

#### Quantiles

If we need to divide data into more partitions than just two then we use quantiles, for example:

-   a *15 %-quantile* divides the data into two parts such that at least **15%** of the values are less than or equal to the quantile and at least **85%** of the values are greater than or equal to the quantile.

Hence, quantiles can take any integer value from *0* to *100* (here it will called **percentiles**) or decimal value between *0* and *1* (here it will called **quintiles**)

Quantiles have special values as follow:

-   *0 %-quantile*: the minimum data value
-   *50 %-quantile*: the median value
-   *100 %-quantile*: the maximum data value

```{r}
quantile(trees$Height)
```

#### Mode

The most frequent value in feature observations called feature *mode*. Hence, the value can be calculated for any feature type.

It cannot be directly calculate with `R`. FAM uses custom algorithm for calculating the mode check @fig-2_5

```{mermaid}
%%| fig-cap: "Calculating Feature Mode"
%%| fig-width: 4
%%| label: fig-2_5
flowchart TD
  S(start)
  S  --> S1[Remove empty values from data]
  S1 --> S2[Extract data unique values]
  S2 --> S3[Calculate each unique value frequency]
  S3 --> S4[Return the highest frequency associated values]
  S4 --> E(end)
  
```

### Calculate Feature Dispersion

Feature dispersion (or variability) is to know how feature data is spread out, to know if data is squeezed or scattered, to know if the data is homogeneous or heterogeneous.

The most famous methods to calculate dispersion are:

-   Range [see @Walpole2014, p. 15; also @Heumann2016, pp. 49-50],
-   Interquartile Range [see @Walpole2014, pp. 24-25; also @Heumann2016, pp. 49-50],
-   Variance [see @Walpole2014, pp. 119-120; also @Heumann2016, pp. 50-55],
-   and Standard Deviation [see @Walpole2014, p. 15; also @Heumann2016, pp. 50-55].

In next subsection, each method will be discussed briefly with an `R` example if applicable

#### Range and Interquartile Range

-   **Range** is the difference between maximum and minimum values in the dataset
-   **Interquartile Range** is the difference between *75th* and *25th* quartiles values

To obtain needed values to calculate both **Range** and **Interquartile Range** using `R, use`summary\` function as follow:

```{r}
summary(trees$Height)
```

#### Variance

Variance is the important and known dispersion value and symbolized as $\sigma^2$ and can be calculated as follow: $$
 \sigma^2 = \sum{\frac{(x_i - \mu)^2}{N}}
$$ where μ is the population mean, $x_i$ is the *ith* element from the population, *N* is the population size, and Σ is just a fancy symbol that means "sum."

To calculate **variance** in `R`, use `var` function as follow

```{r}
var(trees$Height)
```

#### Standard Deviation

Standard deviation is simply the square root of variance and to calculate it in `R`, use `sd` function as follow

```{r}
sd(trees$Height)
sd(trees$Height) == sqrt(var(trees$Height))
```

## Feature Visualization {#sec-visualization}

Numerical analysis is very important as discussed in previous section. However, a picture worthies more than a thousand word. Hence, **FAM** presents its third function to summarize feature data in a more easy-to-understand plot using [cavansXpress](https://canvasxpress.org/).

[cavansXpress](https://canvasxpress.org/) can present numerical analysis along with the other visual analysis tools with the ability to switch between different charts without re-coding our chart, in addition to many other on-shelf features that were discussed in chapter 1.

In next sections, the **FAM** module implemented features graphical representations based on feature type

::: callout-note
If you are using the html version of this book, you can enjoy canvasXpress plots features as right click menu and top bar menu
:::

### Pie Chart

[Pie Chart](https://canvasxpress.org/examples/pie-1.html) is the simplest method to visualize categorical data. It is a circle divided into sectors. Each sector represent a feature relative frequency (upon hovering over plot, both frequency and relative frequency will be shown). Sum of the sectors equal 100%, review @fig-2_6

::: {.content-visible when-format="html"}
```{r, echo=FALSE, message=FALSE}
#| label: fig-2_6
#| fig-cap: "Pie Chart for Categorical Data"

library(dplyr)
library(tidyr)
library(tibble)
library(canvasXpress)

freq_data <- mtcars %>%
    group_by(cyl) %>%
    select(cyl) %>%
    summarise(Frequency = n()) %>%
    as.data.frame() %>%
    column_to_rownames("cyl") %>%
    rename(Cyl = Frequency)

canvasXpress(
    data             = freq_data,
    graphOrientation = "vertical",
    graphType        = "Pie"
)
```
:::

::: {.content-visible when-format="pdf"}
![Pie Chart for Categorical Data](Images/2_2_a_pie_chart.png){#fig-2_6 width="60%"}
:::

### Bar Plot

[Bar Plot](https://canvasxpress.org/examples/bar-1.html) is another method to visualize categorical data, and the most famous. Usually, each category is represented as a bar in the X-axis while bar height represents either category frequency (absolute or relative). The tallest bar is representing the *mode*, review @fig-2_7-1 and @fig-2_7-2

::: {.content-visible when-format="html"}
```{r, echo=FALSE, message=FALSE}
#| label: fig-2_7
#| fig-cap: "Different Bar Chart Views for mtcars Cyl Categorical Features Data"
#| layout-nrow: 2
#| fig-subcap:
#|   - Absolute Frequencies
#|   - Relative Frequencies   
#|   - Absolute Stacked Frequencies
#|   - Relative Stacked Frequencies

library(dplyr)
library(tidyr)
library(tibble)
library(canvasXpress)

freq_data <- mtcars %>%
    group_by(cyl) %>%
    select(cyl) %>%
    summarise(Frequency = n()) %>%
    as.data.frame() %>%
    column_to_rownames("cyl") %>%
    rename(Cyl = Frequency)

rel_freq_data <- freq_data %>%
    mutate(Cyl = round(100 * Cyl/sum(Cyl), 0))

canvasXpress(
    data             = freq_data,
    graphOrientation ="vertical",
    graphType        = "Bar",
    smpLabelRotate   = 90,
    xAxisTitle       = "Distribution"
)

canvasXpress(
    data             = rel_freq_data,
    graphOrientation ="vertical",
    graphType        = "Bar",
    smpLabelRotate   = 90,
    xAxisTitle       = "Distribution(%)"
)

canvasXpress(
    data             = freq_data,
    graphOrientation ="vertical",
    graphType        = "Stacked",
    smpLabelRotate   = 90,
    xAxisTitle       = "Distribution"
)

canvasXpress(
    data             = rel_freq_data,
    graphOrientation ="vertical",
    graphType        = "StackedPercent",
    smpLabelRotate   = 90,
    xAxisTitle       = "Distribution(%)"
)
```
:::

::: {.content-visible when-format="pdf"}
::: {#fig-2_7 layout-nrow="2"}
![Absolute Frequencies](Images/2_3_a_bar_plot.png){#fig-2_7-1 width="48%"}

![Relative Frequencies](Images/2_3_b_bar_plot.png){#fig-2_7-2 width="48%"}

![Absolute Stacked Frequencies](Images/2_3_c_bar_plot.png){#fig-2_7-3 width="48%"}

![Relative Stacked Frequencies](Images/2_3_d_bar_plot.png){#fig-2_7-4 width="48%"}

Different Bar Chart Views for mtcars Cyl Categorical Features Data
:::
:::

There are other views for [Bar Plot](https://canvasxpress.org/examples/bar-1.html) like [Stacked Plots](https://canvasxpress.org/examples/stacked-1.html) and [Stacked Percent Plots](https://canvasxpress.org/examples/stackedpercent-1.html) where bars are stacked above each other to show cumulative distribution along with regular distribution, review @fig-2_7-3 and @fig-2_7-4

::: callout-tip
If categories count is large, bar plot became so dense and might be hard to digest and Histogram plots can be used instead
:::

### Histogram

[Histogram](https://canvasxpress.org/examples/histogram-1.html) idea is very similar to [Bar Plot](https://canvasxpress.org/examples/bar-1.html) but for numerical data (continues and discrete).Mainly the data is divided into multiple intervals (bins). Each bin is represented by its own bar. Bar height represents the frequency for the data within that interval

Using [canvasXpress](https://canvasxpress.org), analyzer can control number of bins and/or bin width. Also analyzer can change the bars into [Dot Plot](https://canvasxpress.org/examples/dotplot-1.html) to display *Relative Frequency*, @fig-2_8

::: {.content-visible when-format="html"}
```{r, echo=FALSE, message=FALSE}
#| label: fig-2_8
#| fig-cap: "Different Histogram Chart Views for mtcars MPG Numerical Features Data"
#| layout-ncol: 2
#| fig-subcap:
#|   - Histogram
#|   - Histogram Dot plot

library(dplyr)
library(tidyr)
library(tibble)
library(canvasXpress)

canvasXpress(
    data              = data.frame(mpg = mtcars$mpg),
    graphType         = "Scatter2D",
    histogramBinWidth = 3,
    xAxisTitle        = "MPG",
    yAxisTitle        = "Frequency",
    showLegend        = FALSE,
    histogramData     = TRUE
)

canvasXpress(
    data               = data.frame(mpg = mtcars$mpg),
    graphType          = "Scatter2D",
    histogramAsDotplot = TRUE,
    histogramBinWidth  = 3, #interval width,
    xAxisTitle         = "MPG",
    yAxisTitle         = "Frequency",
    showLegend         = FALSE,
    histogramData      = TRUE
)
```
:::

::: {.content-visible when-format="pdf"}
::: {#fig-2_8 layout-ncol="2"}
![Histogram](Images/2_4_a_hist_plot.png){#fig-2_8a width="48%"}

![Histogram Dot plot](Images/2_4_b_hist_plot.png){#fig-2_8b width="48%"}

Different Histogram Chart Views for mtcars MPG Numerical Features Data
:::
:::

### Density Plot

[Density Plot](https://canvasxpress.org/examples/density-1.html) is another representation for numerical data but with different look and feel as there is no need to partition data artificially into bins. [canvasXpress](https://canvasxpress.org) has many features to control density plot. Also analyzer can show both histogram and density plot in the same plot, review @fig-2_9

::: {.content-visible when-format="html"}
```{r, echo=FALSE, message=FALSE}
#| label: fig-2_9
#| fig-cap: "Different Density Chart Views for mtcars MPG Numerical Features Data"
#| layout-ncol: 2
#| fig-subcap:
#|   - regular density plot
#|   - density plot showing mean value

library(dplyr)
library(tidyr)
library(tibble)
library(canvasXpress)

canvasXpress(
    data                       = data.frame(mpg = mtcars$mpg),
    graphType                  = "Scatter2D",
    xAxisTitle                 = "MPG",
    yAxisTitle                 = "Frequency",
    showLegend                 = FALSE,
    hideHistogram              = TRUE,
    histogramData              = TRUE,
    showHistogramDensity       = TRUE,
    showFilledHistogramDensity = TRUE,
    showHistogramMedian        = TRUE
)

canvasXpress(
    data                 = data.frame(mpg = mtcars$mpg),
    graphType            = "Scatter2D",
    histogramBinWidth    = 3,
    xAxisTitle           = "MPG",
    yAxisTitle           = "Frequency",
    showLegend           = FALSE,
    histogramData        = TRUE,
    showHistogramDensity = TRUE,
)


```
:::

::: {.content-visible when-format="pdf"}
::: {#fig-2_9 layout-ncol="2"}
![regular density plot](Images/2_5_a_densityt_plot.png){#fig-2_9a width="48%"}

![density plot showing mean value](Images/2_5_b_densityt_plot.png){#fig-2_9b width="48%"}

Different Density Chart Views for mtcars MPG Numerical Features Data
:::
:::

### Boxplot

One of the best methods to describe numerical feature measure tendency and dispersion is [Boxplot](https://canvasxpress.org/examples/boxplot-1.html). It shows median, quartiles, minimum, maximum, and outlier values in the same plot easily, these info can be displayed via plot tooltip upon hovering on the box, review @fig-2_10

::: {.content-visible when-format="html"}
```{r, echo=FALSE, message=FALSE}
#| label: fig-2_10
#| fig-cap: Boxplot for Numerical Feature

library(dplyr)
library(tidyr)
library(tibble)
library(canvasXpress)

canvasXpress(
    data             = t(data.frame(mpg = mtcars$mpg)),
    graphType        = "Boxplot",
    xAxisTitle       = "Frequency",
    smpTitle         = "MPG",
    showLegend       = FALSE,
    graphOrientation = "vertical"
)



```
:::

::: {.content-visible when-format="pdf"}
![Boxplot for Numerical Feature](Images/2_6_a_box_plot.png){#fig-2_10 width="60%"}
:::

## Summary

### Module Functions

All discussed functions in (@sec-cfss) and (@sec-visualization) can be summarized as follow in @fig-2_11

```{mermaid}
%%| fig-cap: "FAM Functions Summary"
%%| fig-width: 5
%%| label: fig-2_11
stateDiagram-v2
    FT   : Identify Feature Type
    CA   : Categorical
    NUM  : Numerical (Discrete/Continuous)
    CAV  : "Visualization" <br/>Pie Chart<br/>Bar Plot
    CAS  : "Statistical Summary" <br/>Mode
    NUV  : "Visualization" <br/>Histogram<br/>Density Plot<br/>Boxplot
    NUS  : "Statistical Summary"
    NUS1 : "Central Tendency Measures"<br/>Mean<br/>Median<br/>Quantiles<br/>Mode
    NUS2 : "Dispersion" <br/>Range<br/>Interquartile Range<br/>Variance<br/>Standard Deviation
    
    FT --> CA
    FT --> NUM
    
    CA --> CAV
    CA --> CAS
    
    NUM --> NUV
    NUM --> NUS
    
    NUS --> NUS1
    NUS --> NUS2

```

### Module Workflow

@fig-2_2 can be updated to include summarized FAM functions workflow and how module parts are interacting with each other and with module user, review @fig-2_12

```{mermaid}
%%| fig-cap: "FAM Usage Sequence Diagram"
%%| fig-width: 5.2
%%| label: fig-2_12
%%| fig-cap-location: top

sequenceDiagram
  actor CSA as Client Shiny App
  participant FAMS as FAM Server
  participant FAMU as FAM UI
  
  CSA  ->>  FAMS: Send data and configurations param
  FAMS ->>  FAMS: Summarize data and identify features
  FAMS -->> FAMU: Render observations <br/> and features Stat
  FAMU ->> CSA: Display data summary
  loop Each Feature
      FAMS ->>  FAMS: Identify feature type
      FAMS ->>  FAMS: Calculate statistical summary
      FAMS -->> FAMU: Render statistical info
      FAMS -->> FAMS: Visualize statistical info
      FAMS -->> FAMU: Render canvasXpress plot
  end
  FAMU ->> CSA: All features report
  
```

### Module UI {#sec-moduleUI}

There can be dozen ways to represent module UI and interactivity with the user, such as:

-   Module can generate full data report offline and make it downloadable to user
-   Or it can be a shiny page with all features information

FAM selected the later solution and implemented full shiny page with all features as seen in @fig-2_13 (*TODO: update screen shot after app is complete and refer to GH PR*)

![Feature Analysis Sample](Images/2_7_feature_analysis.png){#fig-2_13}

::: callout-note
That is a simple suggestion for single feature analysis. You implementation could different and definitely will be more awesome
:::

::: callout-note
The complete module solution can be found in book solutions GitHub
:::

## Exercises

1.  **FAM** used both `data.frame` and `tibbles` as a module input. However, `R` has many other data types for storing data (i.e matrix, tables, ...). Please modify **FAM** input to accept additional data type. What needs to be changed? how that will affect other **FAM** functions?

2.  In this chapter, we only discussed and implemented **arithmetic mean**. However, there are other statistical mean functions that can be implemented to enrich your FAM module as [Geometric mean](https://en.wikipedia.org/wiki/Geometric_mean), [Arithmetic--geometric mean](https://en.wikipedia.org/wiki/Arithmetic%E2%80%93geometric_mean) or [Cubic mean](https://en.wikipedia.org/wiki/Cubic_mean). Pick one and implement one of them

3.  Define configuration input parameters needed to perform (@sec-cfss) and (@sec-visualization) functions and suggest proper default values.

4.  Using `periscope2` app that is created in chapter 1, implement your own version of **Feature Analyzer** module, then compare your solution against implemented solution in book site.

5.  Integrate `?periscope2::downloadFile` module to your module implementation in order to download all feature statistical summary in one file.
